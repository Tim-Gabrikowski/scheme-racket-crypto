(define (entf1 o l)
  (cond ((null? l) `())
        ((equal? o (first l)) o)
        (else (entf1 o (rest l)))
  )
)

(define (enth? o l)
  (cond ((null? l) #f)
        ((equal? o (first l)) #t)
        (else (enth? o (rest l)))
  )
)
(define (senth? c s)
  (cond ((null? s) (a))
        (else (enth? c (string->list s)))
  )
)

(define (entf2 o l)
  (cond ((null? l) `())
        ((equal? o (first l)) (entf2 o (rest l)))
        (else (cons (first l) (entf2 o (rest l))))
  )
)

(define (repl o n l)
  (cond ((null? l) `())
        ((equal? o (first l)) (cons n (repl o n (rest l))))
        (else (cons (first l) (repl o n (rest l))))
  )
)

(define (incr l)
  (cond ((null? l) '())
        (else (cons (string->symbol (string (integer->char (+ 1 (char->integer (string-ref (symbol->string (first l)) 0)))))) (incr (rest l))))
  )
)
(define (% a b) (modulo a b))

(define (incrn l n)
  (cond ((null? l) '())
        (else (cons (string->symbol (string (integer->char (+ n (% (char->integer (string-ref (symbol->string (first l)) 0)) 26))))) (incrn (rest l) n)))
  )
)
