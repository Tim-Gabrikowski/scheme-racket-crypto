; 3.1.a
(define (entf1 o l)
  (cond ((null? l) `())
        ((equal? o (first l)) o)
        (else (entf1 o (rest l)))
  )
)

; 3.1.b
(define (enth? o l)
  (cond ((null? l) #f)
        ((equal? o (first l)) #t)
        (else (enth? o (rest l)))
  )
)

; 3.1.c
(define (senth? c s)
  (cond ((null? s) (#f))
        (else (enth? c (string->list s)))
  )
)
; 3.1.c (2)
(define (senthr? c s)
  (cond ((null? (string->list s)) #f)
        ((equal? c (first (string->list s))) #t)
        (else (senthr? c (list->string (rest (string->list s)))))
  )
)

; 3.1.d
(define (entf2 o l)
  (cond ((null? l) `())
        ((equal? o (first l)) (entf2 o (rest l)))
        (else (cons (first l) (entf2 o (rest l))))
  )
)

; 3.1.e
(define (repl o n l)
  (cond ((null? l) `())
        ((equal? o (first l)) (cons n (repl o n (rest l))))
        (else (cons (first l) (repl o n (rest l))))
  )
)

; 3.1.f
(define (incrSimple l)
  (cond ((null? l) '())
        (else (cons (string->symbol (string (integer->char (+ 1 (char->integer (string-ref (symbol->string (first l)) 0)))))) (incr (rest l))))
  )
)

; 3.1.f Zusatz
(define (% a b) (modulo a b))

(define (incrLint i n)
  (+ (% (+ (- i 97) n) 26) 97)
)
(define (incrUint i n)
   (+ (% (+ (- i 65) n) 26) 65)
)
(define (symbol->int s)
  (char->integer (string-ref (symbol->string s) 0))
)
(define (int->symbol i)
  (string->symbol (string (integer->char i)))
)
(define (incrCint c n)
  (cond ((> c 96) (incrLint c n))
        ((and (> c 64) (< c 97)) (incrUint c n))
  )
)
(define (incr l n)
  (cond ((null? l) '())
        (else (cons (int->symbol (incrCint (symbol->int (first l)) n)) (incr (rest l) n)))
  )
)







